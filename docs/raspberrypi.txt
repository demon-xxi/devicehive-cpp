This document is about porting DeviceHive to RaspberryPi


Building boost (new version)
============================

Now the RPi toolchain is avaialble as a GIT repository. So just checkout it:
  git clone https://github.com/raspberrypi/tools.git RPi-tools

The boost sources are also avaiable as a GIT repository (it uses submodules):
  git clone --recursive https://github.com/boostorg/boost.git

Make the Raspberry Pi toolchain available:
  export PATH=$PATH:~/RPi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin
  echo "using gcc : raspberry : arm-linux-gnueabihf-g++ ;" >> ~/user-config.jam

And build the boost libraries:
  cd ~/boost
  ./bootstrap.sh --with-libraries=system,date_time
  ./b2 toolset=gcc-raspberry


Cross compilation
=================

Since RaspberryPi has ARM processor we have to use special toolchain to build our application.
There are a few tools which can help to prepare such a toolchain: crossdev, crosstool, crosstool-NG.
Let's use the last one [crosstool-NG][crosstool-ng].


Installing crosstool-NG
-----------------------

The following [article](http://www.bootc.net/archives/2012/05/26/how-to-build-a-cross-compiler-for-your-raspberry-pi)
contains details steps. The short version is:
	- download and unpack
	- >./configure && make && sudo make install
	- >cd ./tools/crosstool-ng/raspberrypi
	- >ct-ng menuconfig
	- >ct-ng build

The [crosstool-NG][crosstool-ng] package has the following dependencies:
bison flex texinfo subversion libtool automake libncurses5-dev


Simple "Hello World!" application
---------------------------------

To check cross compilation is working just build the "Hello" application:
>make hello CROSS_COMPILE=arm-unknown-linux-gnueabi-
>file hello
should print something like:
> hello: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 3.5.0, not stripped

Now you can copy executable to your RaspberryPi device and check it's working fine:
> ./hello World


Preparing Boost
---------------

The [Boost][boost] library is widely used in DeviceHive C++ framework. Although most of the [Boost][boost] libraries are header-only,
there are a few [Boost][boost] libraries which we have to build using ARM toolchain.

	- download and unpack boost library
	- >./bootstrap.sh --with-libraries=date_time,thread,system --prefix=/usr/local/raspberrypi
	- >./b2 toolset=gcc-arm

Before build the boost you have ensure that the ~/user-config.jam configuration file contains the following line:

	using gcc : arm : arm-unknown-linux-gnueabi-g++ ;

Now you can link your application with boost static or shared libraries.


References
----------

-[crosstool-NG][crosstool-ng]
[crosstool-ng]: http://crosstool-ng.org/ "crosstool-NG"
-[Boost][boost]
[boost]: http://boost.org "Boost"
